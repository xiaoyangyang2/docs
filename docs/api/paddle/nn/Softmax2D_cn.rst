.. _cn_api_nn_Softmax2D:

Softmax2D
-------------------------------
.. py:class:: paddle.nn.Softmax2D(channel_last=False, name=None)

Softmax2D激活函数：

针对 3D 或者 4D 的 tensor 在空间维度计算softmax，从而输出 tensor 在每个空间维度（channels, hi, wj）的 tensor 求和为1。


.. code-block:: text

  # input

    x.shape = [2, 3, 4] 

    x.data = [[[2.0, 3.0, 4.0, 5.0],
               [3.0, 4.0, 5.0, 6.0],
               [7.0, 8.0, 8.0, 9.0]],
              [[1.0, 2.0, 3.0, 4.0],
               [5.0, 6.0, 7.0, 8.0],
               [6.0, 7.0, 8.0, 9.0]]]

    channel_last = False

  # output

    out.shape = [2, 3, 4]

    out.data = [[[0.73105860, 0.73105860, 0.73105860, 0.73105860],
                 [0.11920291, 0.11920291, 0.11920291, 0.11920291],
                 [0.73105860, 0.73105860, 0.50000000, 0.50000000]],
                [[0.26894143, 0.26894143, 0.26894143, 0.26894143],
                 [0.88079703, 0.88079703, 0.88079703, 0.88079703],
                 [0.26894143, 0.26894143, 0.50000000, 0.50000000]]]

- 示例2（矩阵一共有三维。channel_last = True，表示输入为(H, W, C) ）

.. code-block:: text

  # Input:

    x.shape = [2, 3, 4]

    x.data = [[[2.0, 3.0, 4.0, 5.0],
               [3.0, 4.0, 5.0, 6.0],
               [7.0, 8.0, 8.0, 9.0]],
              [[1.0, 2.0, 3.0, 4.0],
               [5.0, 6.0, 7.0, 8.0],
               [6.0, 7.0, 8.0, 9.0]]]

    channel_last = True

  # Output:

    out.shape = [2, 3, 4]

    out.data = [[[0.03205860, 0.08714432, 0.23688284, 0.64391428],
                 [0.03205860, 0.08714432, 0.23688284, 0.64391428],
                 [0.07232949, 0.19661194, 0.19661194, 0.53444666]],
                [[0.03205860, 0.08714432, 0.23688284, 0.64391428],
                 [0.03205860, 0.08714432, 0.23688284, 0.64391428],
                 [0.03205860, 0.08714432, 0.23688284, 0.64391428]]]

参数
::::::::::
    - channel_last (bool, 可选) - 如果channel在最后一维的话，应设置为True，默认值为False。
    - name (str, 可选) - 操作的名称(可选，默认值为None）。更多信息请参见 :ref:`api_guide_Name`。

形状:
::::::::::
    - input: 3D 或 4D 形状的Tensor。
            3D: `(C, H, W)` OR `(H, W, C)`
            4D: `(N, C, H, W)` OR `(N, H, W, C)`
    - output: 和input具有相同形状的Tensor。

代码示例
::::::::::

.. code-block:: python

    import paddle
    import numpy as np

    x = np.array(
        [[[[2.0, 3.0, 4.0, 5.0], [3.0, 4.0, 5.0, 6.0], [7.0, 8.0, 8.0, 9.0]],
          [[2.0, 3.0, 4.0, 5.0], [3.0, 4.0, 5.0, 6.0], [7.0, 8.0, 8.0, 9.0]],
          [[1.0, 2.0, 3.0, 4.0], [5.0, 6.0, 7.0, 8.0], [6.0, 7.0, 8.0, 9.0]]],
         [[[2.0, 3.0, 4.0, 5.0], [3.0, 4.0, 5.0, 6.0], [7.0, 8.0, 8.0, 9.0]],
          [[2.0, 3.0, 4.0, 5.0], [3.0, 4.0, 5.0, 6.0], [7.0, 8.0, 8.0, 9.0]],
          [[1.0, 2.0, 3.0, 4.0], [5.0, 6.0, 7.0, 8.0], [6.0, 7.0, 8.0, 9.0]]]],
        'float32')
    x = paddle.to_tensor(x)
    m = paddle.nn.Softmax2D()
    out = m(x)
    # [[[[0.42231882, 0.42231882, 0.42231882, 0.42231882],
    #    [0.10650698, 0.10650698, 0.10650698, 0.10650698],
    #    [0.42231882, 0.42231882, 0.33333334, 0.33333334]],
    #   [[0.42231882, 0.42231882, 0.42231882, 0.42231882],
    #    [0.10650698, 0.10650698, 0.10650698, 0.10650698],
    #    [0.42231882, 0.42231882, 0.33333334, 0.33333334]],
    #   [[0.15536241, 0.15536241, 0.15536241, 0.15536241],
    #    [0.78698605, 0.78698605, 0.78698605, 0.78698605],
    #    [0.15536241, 0.15536241, 0.33333334, 0.33333334]]],
    #  [[[0.42231882, 0.42231882, 0.42231882, 0.42231882],
    #    [0.10650698, 0.10650698, 0.10650698, 0.10650698],
    #    [0.42231882, 0.42231882, 0.33333334, 0.33333334]],
    #   [[0.42231882, 0.42231882, 0.42231882, 0.42231882],
    #    [0.10650698, 0.10650698, 0.10650698, 0.10650698],
    #    [0.42231882, 0.42231882, 0.33333334, 0.33333334]],
    #   [[0.15536241, 0.15536241, 0.15536241, 0.15536241],
    #    [0.78698605, 0.78698605, 0.78698605, 0.78698605],
    #    [0.15536241, 0.15536241, 0.33333334, 0.33333334]]]]
